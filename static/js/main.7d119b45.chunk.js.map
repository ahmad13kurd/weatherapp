{"version":3,"sources":["components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getWeather","className","type","name","placeholder","Weather","tempreature","city","country","humidity","description","error","API_KEY","App","state","_callee","e","api","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","components_Form","this","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d119b45.chunk.js","sourcesContent":["import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Form = (props)=>{\n        return (\n            <form onSubmit={props.getWeather}>\n                <div className=\"form-row\">\n                    <div className=\"form-group col-md-4\">\n                    \n                    <input type=\"text\" className=\"form-control\" name=\"city\" placeholder=\"City\"/>\n                    </div>\n                    <div className=\"form-group col-md-4\">\n                   \n                    <input type=\"text\" className=\"form-control\" name=\"country\" placeholder=\"Country\"/>\n                    </div>\n                </div>\n                <button type=\"submit\" className=\"btn btn-dark\">GET WEATHER</button>\n            </form>\n        );\n    }\n\n\nexport default Form;","import React from 'react';\n\nconst Weather = (props)=> {\n    \n    \n        return (\n          <div className=\"info\">\n            {\n                props.tempreature &&\n                <p className=\"info-key\">Tempreature: \n                    <span className=\"info-value\">{ props.tempreature }</span>\n                </p>\n            }\n            {\n                props.city &&\n                <p className=\"info-key\">City: \n                    <span className=\"info-value\">{ props.city }</span>\n                </p>\n            }\n            {\n                props.country &&\n                <p className=\"info-key\">Country: \n                    <span className=\"info-value\">{ props.country }</span>\n                </p>\n            }\n            {\n                props.humidity &&\n                <p className=\"info-key\">Humidity: \n                    <span className=\"info-value\">{ props.humidity }</span>\n                </p>\n            }\n           \n            {\n                props.description &&\n                <p className=\"info-key\">Description: \n                    <span className=\"info-value\">{props.description}</span>\n                </p>\n            }\n            {\n                props.error &&\n                <p className=\"info-key\">Error: \n                    <span className=\"info-value\">{props.error}</span>\n                </p>\n            }\n        </div>\n        );\n    \n}\n \nexport default Weather;\n\n\n\n\n\n","import React, {Component} from 'react';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nimport \"./App.css\";\n\nconst API_KEY = \"9076aa38e40273c5f37923ce36d7ee68\";\n//http://api.openweathermap.org/data/2.5/weather?q=cairo,egypt&appid=9076aa38e40273c5f37923ce36d7ee68\n\n\nclass App extends Component {\n  state = {\n    tempreature: \"\",\n    city: \"\",\n    country: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\"\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\n    );\n    const data = await api.json();\n\n    console.log(data);\n\n    if (city && country) {\n      this.setState({\n        tempreature: data.main.temp - 273.15,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        tempreature: \"\",\n        city: \"\",\n        country: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please Enter Data\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"container\">\n          <Form getWeather={this.getWeather} />\n          <Weather\n            tempreature={this.state.tempreature}\n            city={this.state.city}\n            country={this.state.country}\n            humidity={this.state.humidity}\n            description={this.state.description}\n            error={this.state.error}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}